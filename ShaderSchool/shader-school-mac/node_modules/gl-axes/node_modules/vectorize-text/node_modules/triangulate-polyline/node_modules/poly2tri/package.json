{
  "name": "poly2tri",
  "version": "1.3.3",
  "description": "A 2D constrained Delaunay triangulation library",
  "main": "src/poly2tri.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/r3mi/poly2tri.js.git"
  },
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "prepublish": "npm run build",
    "test": "npm run build && npm run test.node && npm run test.phantom",
    "test.node": "jasmine-node --captureExceptions ./tests/spec",
    "test.phantom": "./node_modules/karma/bin/karma start tests/karma.conf.js --single-run --browsers PhantomJS",
    "test.browsers": "./node_modules/karma/bin/karma start tests/karma.conf.js --single-run",
    "jshint": "jshint *.js src/*.js tests/*.js tests/spec/*.js",
    "build": "npm run jshint && npm run build.nocheck",
    "build.nocheck": "mkdir -p dist && node ./build.js",
    "bench": "node ./tests/benchmark.js"
  },
  "keywords": [
    "2D",
    "constrained",
    "Delaunay",
    "triangulation",
    "geometry",
    "polygon",
    "point",
    "triangle",
    "tessellation",
    "Steiner"
  ],
  "homepage": "http://code.google.com/p/poly2tri/",
  "author": {
    "name": "Rémi Turboult",
    "email": "r3mi@users.sf.net"
  },
  "contributors": [
    {
      "name": "Poly2Tri Contributors"
    },
    {
      "name": "Mason Green",
      "email": "mason.green@gmail.com"
    },
    {
      "name": "Thomas Åhlén",
      "email": "thahlen@gmail.com"
    },
    {
      "name": "Laszlo Kustra",
      "email": "kl223hun@gmail.com"
    },
    {
      "name": "Rémi Turboult",
      "email": "r3mi@users.sf.net"
    }
  ],
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://code.google.com/p/poly2tri/issues/list"
  },
  "devDependencies": {
    "mersennetwister": "~0.1.1",
    "jasmine-node": "~1.12.0",
    "karma": "~0.11.12",
    "karma-jasmine": "~0.1.3",
    "karma-phantomjs-launcher": "~0.1.0",
    "karma-chrome-launcher": "~0.1.0",
    "karma-firefox-launcher": "~0.1.0",
    "jshint": "~2.4.0",
    "browserify": "~3.24.1",
    "karma-browserify": "~0.0.6",
    "benchmark": "~1.0.0",
    "load": "~1.0.0",
    "xhr": "~1.3.1",
    "uglify-js": "~2.4.8",
    "linespin": "0.0.2"
  },
  "readme": "poly2tri.js\n===========\n\n[![Bower version](https://badge.fury.io/bo/poly2tri.png)](http://badge.fury.io/bo/poly2tri)\n[![NPM version](https://badge.fury.io/js/poly2tri.png)](http://badge.fury.io/js/poly2tri)\n\n**Based on the paper \"Sweep-line algorithm for constrained Delaunay triangulation\" by V. Domiter and and B. Zalik**\n\n    Poly2Tri Copyright (c) 2009-2013, Poly2Tri Contributors\n    http://code.google.com/p/poly2tri/\n\n    poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n    https://github.com/r3mi/poly2tri.js\n\n[poly2tri]: http://code.google.com/p/poly2tri/\n[poly2tri.js]: https://github.com/r3mi/poly2tri.js\n[demo]: http://r3mi.github.io/poly2tri.js\n[forum]: https://groups.google.com/forum/?fromgroups#!forum/poly2tri\n[issue]: https://code.google.com/p/poly2tri/issues/list\n[license]: LICENSE.txt\n[jsPerf]: http://jsperf.com/poly2tri/3\n\n\nThis document describes the JavaScript version of [poly2tri]. \nOfficially supported langages are C++ and Java : \n[poly2tri.js] is a community based port, currently based on \nthe \"May 1, 2013\" C++ version, with patches and JavaScript specificities.\nYou can ask support in the [forum].\n\n\npoly2tri.js is distributed with the same license as other poly2tri ports : \nthe revised BSD License (3-clause BSD), see [license].\n\n\nBefore using\n------------\n\nSince there are no input validation of the data given for triangulation you need to think about this. \npoly2tri does not support repeated points within _epsilon_.\n\n* If you have a cyclic function that generates random points make sure you\n  don't  add the same coordinate twice,\n* If you are given input and aren't sure same point exist twice you need to \n  check for this yourself,\n* Only simple polygons are supported. You may add holes or interior Steiner\n  points,\n* Interior holes must not touch other holes, nor touch the polyline boundary,\n* Use the library as described in the next paragraph.\n \n**Make sure you understand the preceding notice before posting an [issue].**\nIf you have  an issue not covered by the above, include your data-set with the problem.\n\nIf you want to triangulate complex or weak polygons, you will need to prepare \nyour data with a polygon clipping library like \n[Javascript Clipper](http://sourceforge.net/projects/jsclipper).\n\nYou can test your dataset using the online JavaScript [demo].\n\n> The only easy day was yesterday; have a nice day. \n> -- <cite>Mason Green</cite>\n\n\nInstall\n-------\n\nThis module works on both Node.js and browsers.\n\nFor Node.js:\n\n[![NPM](https://nodei.co/npm/poly2tri.png?compact=true)](https://nodei.co/npm/poly2tri/)\n\nFor browsers, using Bower:\n```sh\nbower install --save poly2tri\n```\n\nFor browsers, manually:\n```sh\nwget http://r3mi.github.io/poly2tri.js/dist/poly2tri.js\n```\nThe file `dist/poly2tri.js` can be included directly.\nIt is standalone and has no mandatory dependency.\nUse `dist/poly2tri.min.js` for the compressed version.\n\n\nUsage\n-----\n\n1. Get a reference to the library.\n   Thanks to [browserify](http://browserify.org/), the module is in \n   [UMD](https://github.com/umdjs/umd) format (Universal Module Definition), \n   compatible with the various module systems:\n    - CommonJS:\n\n            var poly2tri = require('poly2tri');\n    - RequireJS:\n\n            require('poly2tri', function (poly2tri) {\n                ...\n            });\n    - If you are not using a module system at all, you can access the package\n      as a global variable `poly2tri` (or `window.poly2tri` in a browser).\n\n2. Initialize CDT with a simple polyline \n   (this defines the constrained edges)\n\n        var contour = [\n            new poly2tri.Point(100, 100), \n            new poly2tri.Point(100, 300), \n            new poly2tri.Point(300, 300), \n            new poly2tri.Point(300, 100)\n        ];\n        var swctx = new poly2tri.SweepContext(contour);\n               \n3. Add holes if necessary (also simple polylines)\n\n        var hole = [\n            new poly2tri.Point(200, 200), \n            new poly2tri.Point(200, 250), \n            new poly2tri.Point(250, 250)\n        ];  \n        swctx.addHole(hole);\n\n4. Add Steiner points if necessary\n\n        var point = new poly2tri.Point(150, 150);\n        swctx.addPoint(point);\n\n5. Triangulate\n\n        swctx.triangulate();\n        var triangles = swctx.getTriangles();\n\n6. Use results\n\n        triangles.forEach(function(t) { \n            t.getPoints().forEach(function(p) { \n                console.log(p.x, p.y); \n            });\n            // or t.getPoint(0), t.getPoint(1), t.getPoint(2)\n        });\n\nSee [`index.html`](index.html) for a complete example.\n\nMethod calls can be chained:\n    \n        var triangles = swctx.addHole(hole).addPoint(point).triangulate().getTriangles();\n    \n\nAdvanced Options\n----------------\n\n### Error handling\n\nThe library methods throw an exception for invalid input data,\nsuch as duplicated or colinear points.\nThe exception object will contain a `points` array attribute with the\nfaulty data, if available.\n\n\n### Custom Point class\n\npoly2tri.js supports using custom point class instead of `poly2tri.Point`.\nAny \"Point like\" object with `{x, y}` attributes is supported \nto initialize the SweepContext polylines and points\n([duck typing](http://en.wikipedia.org/wiki/Duck_typing)).\n\n        var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\n        var swctx = new poly2tri.SweepContext(contour);\n\npoly2tri.js might add extra fields to the point objects when computing the\ntriangulation : they are prefixed with `_p2t_` to avoid collisions \nwith fields in the custom class.\n\n\n### Custom Point fields\n\nThe output triangles in `GetTriangles()` have vertices which are references\nto the initial input points (not copies). Any custom fields in the\ninitial points can be retrieved in the output triangles.\n\n        var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\n        var swctx = new poly2tri.SweepContext(contour);\n        swctx.triangulate();\n        var triangles = swctx.getTriangles();\n        typeof triangles[0].getPoint(0).id\n        // → \"number\"\n\n\n### poly2tri.noConflict\n\nReverts the `poly2tri` global object back to its original value, \nand returns a reference to this `poly2tri` object.\n\n        var p = poly2tri.noConflict();\n\n\nDisplaying the samples\n----------------------\n\nInstall the dependent packages by running:\n```sh\nbower install\n```\n\nUse `index.html` (also available online as a [demo]) to display the result of a triangulation.\nPolygon contour, holes, and Steiner points can be added.\nUse any separator between points, e.g.\n\n        100 100\n        [100, 300, 300, 300]\n        (300;100)\nis valid data to describe 4 points.\n\nSome interesting samples can be interactively loaded \nusing the \"Load preset data\" option menu.\nYou can get additional files from the `tests/data` directory.\n\nYou need a modern browser to draw the results, supporting the HTML5 `<canvas>`.\n\n\nDevelopment\n-----------\n\nInstall the dependent packages by running:\n```sh\nnpm install\n```\n\nThe automated tests are built using [jasmine](http://pivotal.github.com/jasmine/),\nboth for browser and for Node.js testing.\nRun the headless tests (JSHint, Node.js and PhantomJS) with:\n```sh\nnpm test\n```\nRun all the browser tests (PhantomJS, Firefox and Chrome) with:\n```sh\nnpm run test.browsers\n```\nCheck JSHint with:\n```sh\nnpm run jshint\n```\n\n\nPerformance tests\n-----------------\n\nThis [jsPerf] compares the performances across several versions of the module.\n\nYou can also run\n```sh\nnpm run bench\n```\n",
  "readmeFilename": "README.md",
  "_id": "poly2tri@1.3.3",
  "_from": "poly2tri@1.3.3"
}
