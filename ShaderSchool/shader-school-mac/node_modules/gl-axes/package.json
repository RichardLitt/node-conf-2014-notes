{
  "name": "gl-axes",
  "version": "2.3.0",
  "description": "Renders axes for WebGL plots",
  "main": "axes.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "gl-matrix": "^2.0.0",
    "gl-buffer": "^2.0.3",
    "gl-vao": "^1.1.1",
    "glslify": "^1.2.0",
    "gl-state": "^1.0.0",
    "bit-twiddle": "^1.0.0",
    "vectorize-text": "^2.0.0",
    "extract-frustum-planes": "^1.0.0",
    "split-polygon": "^1.0.0"
  },
  "devDependencies": {
    "game-shell-orbit-camera": "^0.0.0",
    "gl-now": "^1.0.0",
    "gl-simplicial-complex": "^1.0.0",
    "isosurface": "^0.1.0",
    "beefy": "^1.1.0",
    "browserify": "^2.36.1"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "beefy --open --live example/example.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/gl-axes.git"
  },
  "browserify": {
    "transform": [
      "glslify"
    ]
  },
  "keywords": [
    "webgl",
    "axes",
    "plot",
    "boxes"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikolalysenko/gl-axes/issues"
  },
  "homepage": "https://github.com/mikolalysenko/gl-axes",
  "readme": "gl-axes\n=======\nDraws axes for 3D scenes:\n\n<img src=https://raw.github.com/mikolalysenko/gl-axes/master/example/axes.png>\n\n# Example\n\nHere is a simple example showing how to use gl-axes to visualize the extents of an isosurface:\n\n```javascript\n//Load shell\nvar shell = require(\"gl-now\")({ clearColor: [0,0,0,0] })\nvar camera = require(\"game-shell-orbit-camera\")(shell)\n\n//Mesh creation tools\nvar createMesh = require(\"gl-simplicial-complex\")\nvar polygonize = require(\"isosurface\").surfaceNets\nvar createAxes = require(\"gl-axes\")\n\n//Matrix math\nvar mat4 = require(\"gl-matrix\").mat4\n\n//Bounds on function to plot\nvar bounds = [[-5,-5,-5], [5,5,5]]\n\n//Plot level set of f = 0\nfunction f(x,y,z) {\n  return x*x + y*y + z*z - 2.0\n}\n\n//State variables\nvar mesh, axes\n\nshell.on(\"gl-init\", function() {\n  var gl = shell.gl\n\n  //Set up camera\n  camera.lookAt(bounds[1], [0,0,0], [0, 1, 0])\n\n  //Create mesh\n  mesh = createMesh(gl, polygonize([64, 64, 64], f, bounds))\n\n  //Create axes object\n  axes = createAxes(gl, {\n    bounds: bounds\n  })\n})\n\nshell.on(\"gl-render\", function() {\n  var gl = shell.gl\n  gl.enable(gl.DEPTH_TEST)\n\n  //Compute camera parameters\n  var cameraParameters = {\n    view: camera.view(),\n    projection: mat4.perspective(\n        mat4.create(),\n        Math.PI/4.0,\n        shell.width/shell.height,\n        0.1,\n        1000.0)\n  }\n  \n  //Draw mesh\n  mesh.draw(cameraParameters)\n\n  //Draw axes\n  axes.draw(cameraParameters)\n})\n```\n\n[You can play with this demo yourself on requirebin.](http://requirebin.com/?gist=mikolalysenko/9610686)\n\n# Install\n\n```\nnpm install gl-axes\n```\n\n# API\n\n## Constructor\n\n### `var axes = require(\"gl-axes\")(gl[, params])`\nCreates an axes object.\n\n* `gl` is a WebGL context\n* `params` is an object with the same behavior as [`axes.update`](#axesupdateparams)\n\n**Returns** A new `glAxes` object for drawing the \n\n## Methods\n\n### `axes.draw(camera)`\nDraws the axes object with the given camera parameters.  The `camera` object can have the following properties:\n\n* `model` - Is the model matrix for the axes object (default identity)\n* `view` - Is the view matrix for the axes (default identity)\n* `projection` - Is the projection matrix for the axes (default identity)\n\nAll camera matrices are in 4x4 homogeneous coordinates and encoded as length 16 arrays as done by [`gl-matrix`](https://github.com/toji/gl-matrix).\n\n### `axes.update(params)`\nUpdates the parameters of the axes object using the properties in `params`. These can be as follows:\n\n* `bounds` the bounding box for the axes object, represented as a pair of 3D arrays encoding the lower and upper bounds for each component.  Default is `[[-10,-10,-10],[10,10,10]]`\n* `labels` a 3D array encoding the labels for each of the 3 axes.  Default is `['x', 'y', 'z']`\n* `tickSpacing` either a number or 3d array representing the spacing between the tick lines for each axis. Default is `0.5`\n* `showAxes` a vector of boolean values determining which of the 3 axes tick lines to show.  Default is `[true,true,true]`\n* `tickWidth` the width of a tick line in the underlying box in pixels\n* `font` the font family to use for rendering text.  Default `'sans-serif'`\n* `axesColors` an array of colors for each axis, or else a single 3D array encoding all axes colors.  Default is `[[0,0,0], [0,0,0], [0,0,0]]`\n* `gridColor` the color of the grid lines in the background.  Default is `[0,0,0]`\n* `ticks` Alternatively, you can specify custom tick labels for each axis by passing in an array of 3 arrays of tick markings.  Each tick marking array is an array of objects with the properties `x` and `text` which denote the position on the tick axis and the text of the tick label respectively.\n* `textScale` overrides the scaling computation to a default textScale in model coordinates.\n\n### `axes.dispose()`\nReleases all resources associated with this axes object.\n\n# Credits\n(c) 2014 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "_id": "gl-axes@2.3.0",
  "_from": "gl-axes@^2.2.3"
}
