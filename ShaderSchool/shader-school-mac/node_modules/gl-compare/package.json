{
  "name": "gl-compare",
  "version": "1.0.0",
  "description": "Visually compare two webgl render loops on the fly",
  "main": "index.js",
  "license": "MIT",
  "scripts": {
    "start": "cd example && beefy index.js:bundle.js --open",
    "bundle": "browserify example/index.js > bundle.js"
  },
  "browserify": {
    "transform": [
      "glslify"
    ]
  },
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughsk.io/"
  },
  "dependencies": {
    "a-big-triangle": "0.0.0",
    "canvas-pixels": "0.0.0",
    "gl-fbo": "^1.1.0",
    "glslify": "^1.4.0"
  },
  "devDependencies": {
    "beefy": "^1.1.0",
    "browserify": "^4.1.10",
    "canvas-fit": "0.0.0",
    "canvas-orbit-camera": "0.0.0",
    "domify": "^1.2.2",
    "gl-clear": "0.0.0",
    "gl-context": "^0.1.0",
    "gl-geometry": "0.0.0",
    "gl-matrix": "^2.1.0",
    "icosphere": "0.0.0",
    "normals": "^0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/gl-compare.git"
  },
  "keywords": [
    "webgl",
    "gl",
    "comparison",
    "gl-modules",
    "difference",
    "onion",
    "fbo"
  ],
  "homepage": "https://github.com/hughsk/gl-compare",
  "bugs": {
    "url": "https://github.com/hughsk/gl-compare/issues"
  },
  "readme": "# gl-compare [![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)\n\nVisually compare two WebGL render loops on the fly by drawing them to an FBO\nand diffing them with shaders.\n\n[![gl-compare](http://imgur.com/zVtYFax.jpg)](http://hughsk.io/gl-compare)\n\n## Usage\n\n[![NPM](https://nodei.co/npm/gl-compare.png)](https://nodei.co/npm/gl-compare/)\n\n### comparison = compare(gl, actual, expected)\nCreates a comparison renderer.\n\n* `gl` is the WebGL context.\n* `actual(fbo)` is the first render loop to run.\n* `expected(fbo)` is the second render loop to run.\n\nNote that these are both running within the same context – generally, this won't\nbe a problem if you're cleaning up after yourself, but keep that in mind. Also\nnote that instead of using:\n\n``` javascript\ngl.bindFramebuffer(gl.FRAMEBUFFER, null)\n```\n\nYou should use:\n\n``` javascript\nfbo.bind()\n```\n\nWhere `fbo` is the first argument passed to the render loop. If you'd like to\nresize your FBOs to match the size of the canvas:\n\n``` javascript\nfunction actual(fbo) {\n  fbo.shape = [canvas.height, canvas.width]\n}\n\nfunction expected(fbo) {\n  fbo.shape = [canvas.height, canvas.width]\n}\n```\n\n### comparison.run()\nRenders the `actual` and `expected` loops to their respective FBOs. Should be\ncalled before you call `comparison.render`.\n\n### comparison.render()\nRenders the comparison to your screen.\n\n### comparison.mode\nThe mode of comparison – may be set to one of the following:\n\n* `diff`: RGB color difference.\n* `onion`: blending between `actual` and `expected`.\n* `slide`: a slider that divides `actual` and `expected`.\n\n### comparison.amount\nUsed to vary the amount of diffing to do for each mode, and can be any value\nbetween 0 and 1. Has the following effects:\n\n* `diff`: 0 will amplify *any* difference considerably, whereas 1 will dull the\n  difference to only show the most significant changes.\n* `onion`: 0 will display `actual`, 1 will display `expected`, and any values\n  in between will be a mixture of both.\n* `slide`: 0 will display `actual`, 1 will display `expected`, and any values\n  in between will move the slider from the left of the buffer to the right.\n\n## License\n\nMIT. See [LICENSE.md](http://github.com/hughsk/gl-compare/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "_id": "gl-compare@1.0.0",
  "_from": "gl-compare@^1.0.0"
}
