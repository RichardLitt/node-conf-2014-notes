{
  "name": "unindex-mesh",
  "description": "Takes a list of vertices and faces, giving you back an array of individual triangles.",
  "version": "0.0.0",
  "main": "index.js",
  "browser": "index.js",
  "dependencies": {},
  "devDependencies": {},
  "scripts": {},
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://github.com/hughsk"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/unindex-mesh"
  },
  "bugs": {
    "url": "https://github.com/hughsk/unindex-mesh/issues"
  },
  "keywords": [
    "low",
    "poly",
    "mesh",
    "vertices",
    "faces",
    "index",
    "3d",
    "webgl"
  ],
  "readme": "# unindex-mesh [![stable](http://hughsk.github.io/stability-badges/dist/stable.svg)](http://github.com/hughsk/stability-badges) #\n\nTakes a list of vertices and faces, giving you back an array of individual\ntriangles.\n\nIn most cases with WebGL, you'll want to stick with indexed geometry - i.e.\nproviding a list of unique vertices and the faces that consume them, rather\nthen including a bunch of duplicate vertices to make each face. This way,\nyou consume less memory and *maybe* get some performance benefits too. That's\nwhy modules like [bunny](http://npmjs.org/package/bunny) are formatted this\nway.\n\nOne exemption to this case is if you want to for an intentionally flat\npolygonal look. If you use indexed geometry you'll have forced interpolation\nbetween your faces, getting rid of hard edges: this is normally a good thing,\nbut it spoils the low-poly look if that's what you're after.\n\nSo for interoperability/convenience this module can take indexes meshes and\noutput a `Float32Array` of individual triangles ready to send over to the GPU.\n\n## Usage ##\n\n[![unindex-mesh](https://nodei.co/npm/unindex-mesh.png?mini=true)](https://nodei.co/npm/unindex-mesh)\n\n### `require('unindex-mesh')(positions, faces[, out])` ###\n\n`positions` is an array of vertex positions, with each element being a 3\nelement vector.\n\n`faces` is a list of triangular faces, with each element being a 3 element\nvector of integer indexes.\n\n`out` is an optional argument for including your own array to output the\nresult into. If not passed, a `Float32Array` of the correct length will\nbe created for you.\n\n``` javascript\nvar faceNormals = require('mesh-normals')\nvar unindex = require('unindex-mesh')\nvar bunny = require('bunny')\n\nvar lowpoly = unindex(bunny.positions, bunny.cells)\nvar lowpolynormals = faceNormals(lowpoly)\n```\n\n## License ##\n\nMIT. See [LICENSE.md](http://github.com/hughsk/unindex-mesh/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/hughsk/unindex-mesh",
  "_id": "unindex-mesh@0.0.0",
  "_from": "unindex-mesh@0.0.0"
}
