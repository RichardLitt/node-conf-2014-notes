{
  "name": "rework-npm",
  "version": "0.6.1",
  "description": "Import CSS from npm modules using rework",
  "main": "index.js",
  "scripts": {
    "test": "tap test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/conradz/rework-npm.git"
  },
  "keywords": [
    "rework",
    "css",
    "style",
    "import",
    "npm",
    "modules"
  ],
  "author": {
    "name": "Conrad Zimmerman",
    "email": "me@conradz.com"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/conradz/rework-npm/issues"
  },
  "devDependencies": {
    "rework": "~0.20.1",
    "tap": "~0.4.4",
    "node-sass": "^0.8.1"
  },
  "dependencies": {
    "resolve": "~0.6.1",
    "css-parse": "~1.7.0"
  },
  "readme": "# rework-npm\n\n[![NPM](https://nodei.co/npm/rework-npm.png?compact=true)](https://nodei.co/npm/rework-npm/)\n\n[![Build Status](https://drone.io/github.com/conradz/rework-npm/status.png)](https://drone.io/github.com/conradz/rework-npm/latest)\n[![Dependency Status](https://david-dm.org/conradz/rework-npm.png)](https://david-dm.org/conradz/rework-npm)\n\nImport CSS styles from NPM modules using\n[rework](https://github.com/visionmedia/rework).\n\nThis lets you use `@import` CSS using the same rules you use for `require` in\nNode. Specify the CSS file for a module using the `style` field in\n`package.json` and use `@import \"my-module\";`, or specify the file name in the\nmodule, like `@import \"my-module/my-file\";`. You can also require files relative\nto the current file using `@import \"./my-file\";`.\n\nAn `@import` will be processed so that the file referenced will have been\nimported in the current scope at the point of the `@import`. If a file has been\npreviously imported in the current scope, that file will not be imported again.\nNew scopes are created in a block such as a `@media` block. Child blocks will\nnot duplicate imports that have been imported in the parent block, but may\nduplicate imports that are imported in a sibling block (since they may not have\neffect otherwise).\n\nYou can use source maps to show which file a definition originated from when\ndebugging in a browser. To include inline source maps, use\n`.toString({ sourcemap: true })` on the rework object when generating the\noutput.\n\n## Example\n\n```js\nvar rework = require('rework'),\n    reworkNPM = require('rework-npm');\n\nvar output = rework('@import \"test\"')\n    .use(reworkNPM())\n    .toString();\n\nconsole.log(output);\n```\n\n## Reference\n\n### `reworkNPM([opts])`\n\nCreates a new plugin for rework that will import files from NPM.\n\nIf `opts` is a string, it is used as the `dir` option.\n\nValid options:\n\n * `dir`: The directory where the source file is located. If not specified, it\n   uses the current directory.\n * `root`: The directory where all source files are located. This is used for\n   source maps. All imported files will have file paths relative to this\n   directory in the source maps. By default this uses the `dir` option.\n * `shim`: If you need to import packages that do not specify a `style`\n   property in their `package.json` or provide their styles in `index.css`,\n   you can provide a shim config option to access them. This is specified as a\n   hash whose keys are the names of packages to shim and whose values are the\n   path, relative to that package's `package.json` file, where styles can be\n   found. Example: `shim: {'leaflet': 'dist/leaflet.css'}`\n * `alias`: You can provide aliases for arbitrary file paths using the same\n   format as the `shim` option. `alias: {'tree': './deep/tree/index.css'}`\n * `prefilter`: If you need to prefilter input files, e.g. convert\n   whitespace-sensitive CSS to normal CSS, you can give a prefilter function.\n   Example: `prefilter: require('css-whitespace')`\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/conradz/rework-npm",
  "_id": "rework-npm@0.6.1",
  "_from": "rework-npm@^0.6.1"
}
